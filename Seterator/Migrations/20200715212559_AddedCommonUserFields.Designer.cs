// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seterator;

namespace Seterator.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200715212559_AddedCommonUserFields")]
    partial class AddedCommonUserFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Seterator.Models.Competition", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatorUserGuid");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Extra");

                    b.Property<string>("ShortDescription");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("Guid");

                    b.HasIndex("CreatorUserGuid");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Guid");

                    b.ToTable("CompetitionCategories");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionConstraint", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckedValue");

                    b.Property<Guid>("CompetitionGuid");

                    b.Property<int>("Max");

                    b.Property<int>("Min");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("CompetitionConstraints");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelCategory", b =>
                {
                    b.Property<Guid>("CategoryGuid");

                    b.Property<Guid>("CompetitionGuid");

                    b.HasKey("CategoryGuid", "CompetitionGuid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("CompetitionRelCategories");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelJury", b =>
                {
                    b.Property<Guid>("CompetitionGuid");

                    b.Property<Guid>("JuryUserGuid");

                    b.Property<Guid?>("JuryGuid");

                    b.HasKey("CompetitionGuid", "JuryUserGuid");

                    b.HasIndex("JuryGuid");

                    b.ToTable("CompetitionRelJuries");
                });

            modelBuilder.Entity("Seterator.Models.Participant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompetitionGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Nickname");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserGuid");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Seterator.Models.ParticipantAssessment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Assessment");

                    b.Property<Guid>("JuryGuid");

                    b.Property<Guid>("ParticipantGuid");

                    b.HasKey("Guid");

                    b.HasIndex("ParticipantGuid");

                    b.ToTable("ParticipantAssessments");
                });

            modelBuilder.Entity("Seterator.Models.Poem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ParticipantGuid");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("Guid");

                    b.HasIndex("ParticipantGuid");

                    b.ToTable("Poems");
                });

            modelBuilder.Entity("Seterator.Models.Prize", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeginPlace");

                    b.Property<Guid>("CompetitionGuid");

                    b.Property<int>("EndPlace");

                    b.Property<string>("Value");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("Seterator.Models.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserGuid");

                    b.Property<int>("UserRole");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Seterator.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FbProfile");

                    b.Property<string>("FirstName");

                    b.Property<string>("INN");

                    b.Property<string>("InstProfile");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("PrivateEmail");

                    b.Property<string>("PrivatePhone");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("PublicEmail");

                    b.Property<string>("PublicPhone");

                    b.Property<string>("RegisterAddress");

                    b.Property<string>("SNILS");

                    b.Property<string>("SecondName");

                    b.Property<string>("UserUrlsJson")
                        .HasColumnName("UserUrls");

                    b.Property<bool>("Verified");

                    b.Property<string>("VkProfile");

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Seterator.Models.UserDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .HasColumnName("data");

                    b.Property<Guid>("OwnerGuid")
                        .HasColumnName("OwnerGuid");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Seterator.Models.UserProfile", b =>
                {
                    b.Property<Guid>("RoleGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("ShortLink");

                    b.HasKey("RoleGuid");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Seterator.Models.Competition", b =>
                {
                    b.HasOne("Seterator.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionConstraint", b =>
                {
                    b.HasOne("Seterator.Models.Competition")
                        .WithMany("Constraints")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelCategory", b =>
                {
                    b.HasOne("Seterator.Models.CompetitionCategory", "Category")
                        .WithMany("Competitions")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelJury", b =>
                {
                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Jury")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.User", "Jury")
                        .WithMany()
                        .HasForeignKey("JuryGuid");
                });

            modelBuilder.Entity("Seterator.Models.Participant", b =>
                {
                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.ParticipantAssessment", b =>
                {
                    b.HasOne("Seterator.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Poem", b =>
                {
                    b.HasOne("Seterator.Models.Participant", "Author")
                        .WithMany("Poems")
                        .HasForeignKey("ParticipantGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Prize", b =>
                {
                    b.HasOne("Seterator.Models.Competition")
                        .WithMany("Prizes")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Role", b =>
                {
                    b.HasOne("Seterator.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.UserDocument", b =>
                {
                    b.HasOne("Seterator.Models.User", "Owner")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
