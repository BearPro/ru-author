// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seterator;

namespace Seterator.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Seterator.Models.Competition", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<byte[]>("CreatorUserGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("creator_user_guid");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<string>("Extra")
                        .HasColumnName("extra");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("short_description");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Guid");

                    b.HasIndex("CreatorUserGuid");

                    b.ToTable("competition");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionCategory", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("competition_categories");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionConstraint", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<string>("CheckedValue")
                        .HasColumnName("checked_value");

                    b.Property<byte[]>("CompetitionGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_guid");

                    b.Property<int>("Max")
                        .HasColumnName("max");

                    b.Property<int>("Min")
                        .HasColumnName("min");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("competition_constraints");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelCategory", b =>
                {
                    b.Property<byte[]>("CategoryGuid")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_guid");

                    b.Property<byte[]>("CompetitionGuid")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_category_guid");

                    b.HasKey("CategoryGuid", "CompetitionGuid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("competition_rel_category");
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelJury", b =>
                {
                    b.Property<byte[]>("CompetitionGuid")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_guid");

                    b.Property<byte[]>("JuryUserGuid")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("jury_user_guid");

                    b.HasKey("CompetitionGuid", "JuryUserGuid");

                    b.HasIndex("JuryUserGuid");

                    b.ToTable("competition_rel_jury");
                });

            modelBuilder.Entity("Seterator.Models.Participant", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<byte[]>("CompetitionGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_guid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date");

                    b.Property<string>("Nickname")
                        .HasColumnName("nickname");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("enum('New','Approved','Rejected','Updated')");

                    b.Property<byte[]>("UserGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("user_guid");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("participant");
                });

            modelBuilder.Entity("Seterator.Models.ParticipantAssessment", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<string>("Assessment")
                        .HasColumnName("assessment")
                        .HasColumnType("enum('0', '2', '3', '4', '5')");

                    b.Property<byte[]>("JuryGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("jury_guid");

                    b.Property<byte[]>("ParticipantGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("participant_guid");

                    b.HasKey("Guid");

                    b.HasIndex("ParticipantGuid");

                    b.ToTable("participant_assessment");
                });

            modelBuilder.Entity("Seterator.Models.Poem", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<byte[]>("ParticipantGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("author_participant_guid");

                    b.Property<string>("Text")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Guid");

                    b.HasIndex("ParticipantGuid");

                    b.ToTable("poem");
                });

            modelBuilder.Entity("Seterator.Models.Prize", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<int>("BeginPlace")
                        .HasColumnName("begin_place");

                    b.Property<byte[]>("CompetitionGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("competition_guid");

                    b.Property<int>("EndPlace")
                        .HasColumnName("end_place");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Guid");

                    b.HasIndex("CompetitionGuid");

                    b.ToTable("prizes");
                });

            modelBuilder.Entity("Seterator.Models.Role", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<byte[]>("UserGuid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("user_guid");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("Enum( 'moderator', 'jury', 'user', 'manager', 'admin' )");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Seterator.Models.User", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("GUID");

                    b.Property<string>("Login")
                        .HasColumnName("login");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("BINARY(24)");

                    b.HasKey("Guid");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Seterator.Models.UserProfile", b =>
                {
                    b.Property<byte[]>("RoleGuid")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)))
                        .HasColumnName("user_role_guid");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<string>("ShortLink")
                        .HasColumnName("short_link");

                    b.HasKey("RoleGuid");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Seterator.Models.Competition", b =>
                {
                    b.HasOne("Seterator.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionConstraint", b =>
                {
                    b.HasOne("Seterator.Models.Competition")
                        .WithMany("Constraints")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelCategory", b =>
                {
                    b.HasOne("Seterator.Models.CompetitionCategory", "Category")
                        .WithMany("Competitions")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.CompetitionRelJury", b =>
                {
                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Jury")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.User", "Jury")
                        .WithMany()
                        .HasForeignKey("JuryUserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Participant", b =>
                {
                    b.HasOne("Seterator.Models.Competition", "Competition")
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seterator.Models.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.ParticipantAssessment", b =>
                {
                    b.HasOne("Seterator.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Poem", b =>
                {
                    b.HasOne("Seterator.Models.Participant", "Author")
                        .WithMany("Poems")
                        .HasForeignKey("ParticipantGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Prize", b =>
                {
                    b.HasOne("Seterator.Models.Competition")
                        .WithMany("Prizes")
                        .HasForeignKey("CompetitionGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seterator.Models.Role", b =>
                {
                    b.HasOne("Seterator.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
